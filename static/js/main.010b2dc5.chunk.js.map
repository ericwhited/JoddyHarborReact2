{"version":3,"sources":["Components/CharacterCard.js","jobs.js","Components/InfoCard.js","Containers/CharacterList.js","App.js","Components/SecondApp.js","serviceWorker.js","index.js"],"names":["Styleddiv","styled","div","props","image","backgroundImage","CharacterCard","name","setJobInformation","onClick","index","event","showInfoCard","consolelog","id","jobs","subclass","weapons","properties","stats","style","position","zIndex","top","height","background","left","right","margin","padding","fontSize","InfoCard","jobName","hideInfoCard","nextJob","prevJob","className","CharacterList","state","currentJobId","jobsInfo","setJobInformationHandler","setState","console","log","showInfoCardHandler","hideInfoCardHandler","nextJobHandler","prevJobHandler","renderCharacterCard","map","job","key","replace","infocard","this","Component","App","React","overflow","backgroundSize","backgroundRepeat","backgroundPosition","src","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.010b2dc5.chunk.js","sourcesContent":["import React from \"react\";\nimport styled, { css } from \"styled-components\";\n\n// Figure out how to change the background based on props or something so that each character box has the right job photo there.\nconst Styleddiv = styled.div`\n  background-image: url(${props => props.image});\n  background-size: contain;\n  background-repeat: no-repeat;\n  background-position: center;\n  height: 300px;\n  width: 118px;\n  height: 120px;\n  /* border: 2px solid black; */\n  /* transform: skew(-20deg); */\n  display: inline-block;\n  font-size: 14px;\n  margin: 5px 0;\n  /* background-image: url(${props => props.backgroundImage}); */\n`;\n\n// make a shownext info handler in here and change ID\n// make a shownext info handler in here and change ID\n// make a shownext info handler in here and change ID\n\nconst CharacterCard = ({\n  name,\n  onClick,\n  setJobInformation,\n  event,\n  backgroundImage,\n  index,\n  consolelog,\n  id,\n  showInfoCard,\n  image\n}) => {\n  return (\n    <Styleddiv\n      image={image}\n      onClick={event => {\n        showInfoCard(index);\n        setJobInformation(index, index, name);\n      }}\n    ></Styleddiv>\n  );\n};\nexport default CharacterCard;\n","const jobs = [\n  {\n    name: \"Knight\"\n  },\n  {\n    id: 1,\n    name: \"Berserker\",\n    subclass: \"Warrior\",\n    weapons: \"2H Sword\",\n    properties: \"Physical\",\n    stats: \"STR, HP, Physical Damage\"\n  },\n  {\n    name: \"Wizard\",\n    weapons: \"Staff\",\n    properties: \"Fire, Frost, Lightning\",\n    stats: \"INT, Magic Attack\"\n  },\n  {\n    name: \"Priest\",\n    weapons: \"Scepter, Codex\",\n    properties: \"Holy\",\n    stats: \"INT, Healing\"\n  },\n  {\n    name: \"Heavy Gunner\",\n    weapons: \"Cannon\",\n    properties: \"Physical, Fire, Lightning\",\n    stats: \"DEX, Physical Damage\"\n  },\n  {\n    name: \"Archer\",\n    weapons: \"Bow\",\n    properties: \"Physical, Fire, Ice\",\n    stats: \"Dex, Attack Speed, Critical Hit\"\n  },\n  {\n    name: \"Assassin\",\n    weapons: \"One-handed Thrown Weapons\",\n    properties: \"Physical, Shadow\",\n    stats: \"LUK, Critical Damage\"\n  },\n  {\n    name: \"Thief\",\n    weapons: \"One-handed Daggers\",\n    properties: \"Physical, Toxic\",\n    stats: \"LUK, Movement Speed, Evasion\"\n  },\n  {\n    name: \"Runeblader\",\n    weapons: \"2H Blade\",\n    properties: \"Fire, Frost, Lightning\",\n    stats: \"STR, INT\"\n  },\n  {\n    name: \"Soul Binder\",\n    weapons: \"2H Orb\",\n    properties: \"None\",\n    stats: \"INT, Magic Attack\"\n  },\n  {\n    name: \"Striker\"\n  }\n];\n\nexport default jobs;\n","import React from \"react\";\n\nconst style = {\n  position: \"absolute\",\n  zIndex: \"10\",\n  // border: \"10px solid blue\",\n  top: \"0\",\n  height: \"100vh\",\n  // width: \"70%\",\n  background: \"lightGray\",\n  left: \"0\",\n  right: \"0\",\n  margin: \"0\",\n  padding: \"0\",\n  fontSize: \"50px\"\n};\n\nconst InfoCard = ({\n  jobName,\n  subclass,\n  weapons,\n  properties,\n  stats,\n  hideInfoCard,\n  showInfoCard,\n  setJobInformation,\n  nextJob,\n  prevJob\n}) => {\n  return (\n    <div style={style}>\n      <p>Info Card</p>\n      {jobName}, {subclass}, {weapons}, {properties}, {stats}\n      <div className=\"closeButton\" onClick={hideInfoCard}>\n        X\n      </div>\n      <div onClick={prevJob}>Previous</div>\n      <div onClick={nextJob}>Next</div>\n    </div>\n  );\n};\n\nexport default InfoCard;\n","import React, { Component } from \"react\";\nimport CharacterCard from \"../Components/CharacterCard\";\nimport styled from \"styled-components\";\nimport jobsInfo from \"../jobs\";\nimport InfoCard from \"../Components/InfoCard\";\n\nclass CharacterList extends Component {\n  state = {\n    showInfoCard: false,\n    currentJobId: 0,\n    jobs: jobsInfo\n  };\n\n  setJobInformationHandler = index => {\n    this.setState({\n      currentJobId: index\n    });\n    console.log(\"this.state.currentJobId\");\n    console.log(this.state.currentJobId);\n    console.log(\"jobInfoHnalder index\");\n    console.log(index);\n\n    // console.log(\"SET-jobInformationHandler fired\", this.state.currentJobInfo);\n    // console.log(\"this is the event\" + \" \" + event);\n  };\n\n  showInfoCardHandler = index => {\n    this.setState({\n      showInfoCard: true\n      // currentJobId: index\n    });\n    console.log(\"ShowInfoCardHandler Fired\");\n    console.log(this.state.jobs);\n    // console.log(\"this.state.currentJobId\");\n    // console.log(this.state.currentJobId);\n  };\n\n  hideInfoCardHandler = () => {\n    this.setState({ showInfoCard: false });\n  };\n\n  nextJobHandler = () => {\n    // let currentJobId = this.state.currentJobId;\n    this.setState({\n      currentJobId: this.state.currentJobId + 1\n    });\n    console.log(this.state.currentJobId);\n  };\n\n  prevJobHandler = () => {\n    if (this.state.currentJobId < 1) {\n      // set it to the last index / id thing\n    } else {\n      this.setState({\n        currentJobId: this.state.currentJobId - 1\n      });\n      console.log(this.state.currentJobId);\n    }\n  };\n\n  renderCharacterCard = props => {\n    const jobs = this.state.jobs;\n\n    return jobs.map((job, index) => {\n      return (\n        <CharacterCard\n          id={index}\n          key={job.name}\n          name={job.name}\n          image={`/assets/minis/${job.name.replace(/\\s+/g, \"\")}.png`}\n          // image={`/assets/star_1.png`}\n          showInfoCard={index => this.showInfoCardHandler(index)}\n          // showInfoCard={id => this.showInfoCardHandler(id)}\n          setJobInformation={event => {\n            this.setJobInformationHandler(index);\n          }}\n        />\n      );\n    });\n  };\n\n  render() {\n    let infocard = null;\n\n    if (this.state.showInfoCard) {\n      const [name, subclass, weapons, properties, stats] = this.state.jobs;\n      const currentJobId = this.state.currentJobId;\n      infocard = (\n        <div>\n          <InfoCard\n            jobName={this.state.jobs[currentJobId].name}\n            // subclass={this.state.currentJobInfo[1].subclass}\n            weapons={this.state.jobs[currentJobId].weapons}\n            properties={this.state.jobs[currentJobId].properties}\n            stats={this.state.jobs[currentJobId].stats}\n            setJobInformation={event => this.setJobInformationHandler(event)}\n            hideInfoCard={this.hideInfoCardHandler}\n            showInfoCard={event => this.showInfoCardHandler(event)}\n            nextJob={this.nextJobHandler}\n            prevJob={this.prevJobHandler}\n          />\n        </div>\n      );\n    }\n    return (\n      <div>\n        {this.renderCharacterCard()}\n        {infocard}\n      </div>\n    );\n  }\n}\n\nexport default CharacterList;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport CharacterList from \"./Containers/CharacterList\";\nimport SecondApp from \"./Components/SecondApp\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div\n        className=\"App\"\n        style={{\n          overflow: \"hidden\",\n          height: \"100vh\",\n          backgroundImage: \"url('/assets/background.jpg')\",\n          backgroundSize: \"cover\",\n          backgroundRepeat: \"no-repeat\",\n          backgroundPosition: \"bottom\"\n        }}\n      >\n        <img src=\"/assets/logo.png\" style={{ margin: \"1.5rem 0\" }} />\n        <CharacterList />\n      </div>\n    );\n  }\n}\n\n// When clicking the next arrow on the infoCard .. fire the same event handler once u click on\n// any of the CharacterCard components. figure out how to advance it to the next character in the index\n\nexport default App;\n","import React from \"react\";\n\nclass SecondApp extends React.Component {\n  state = {\n    currentUser: 0,\n    users: [\n      { id: 0, name: \"Eric\" },\n      { id: 1, name: \"Zac\" },\n      { id: 2, name: \"Leah\" },\n      { id: 3, name: \"Zenders\" },\n      { id: 4, name: \"D2\" }\n    ]\n  };\n\n  nextHandler = index => {\n    this.setState({\n      currentUser: this.state.currentUser + 1\n    });\n    console.log(\"[nextHandler] Fired!\");\n    console.log(this.state.currentUser);\n    console.log(this.state.users);\n    // console.log(this.state.users[currentUser].name);\n  };\n\n  prevHandler = () => {\n    this.setState({\n      currentUser: this.state.currentUser + -1\n    });\n    console.log(\"[nextHandler] Fired!\");\n    console.log(this.state.currentUser);\n    console.log(this.state.users);\n    // console.log(this.state.users[currentUser].name);\n  };\n\n  render() {\n    let currentUser = this.state.currentUser;\n    return (\n      <div>\n        <div>\n          <button onClick={this.prevHandler}>Prev</button>\n          <button onClick={this.nextHandler}>Next</button>\n        </div>\n        {this.state.users[currentUser].name}\n      </div>\n    );\n  }\n}\n\nexport default SecondApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}